[{"/Users/dipmallakhani/Desktop/react-d3/react-d3/src/App.js":"1","/Users/dipmallakhani/Desktop/react-d3/react-d3/src/Charts/DonutChart.js":"2"},{"size":775,"mtime":1607402000806,"results":"3","hashOfConfig":"4"},{"size":5064,"mtime":1607402555154,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"8vr9ij",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/dipmallakhani/Desktop/react-d3/react-d3/src/App.js",["11"],"/Users/dipmallakhani/Desktop/react-d3/react-d3/src/Charts/DonutChart.js",["12"],"import React, { useState, useEffect } from 'react'\nimport * as d3 from 'd3';\nimport tippy, { followCursor } from 'tippy.js';\nimport 'tippy.js/dist/tippy.css';\nimport './DonutChart.css'\n\nconst DonutChart = (props) => {\n    const [dimension] = useState({\n        width: 350,\n        height: 350,\n        margin: 50,\n        radius: () => Math.min(dimension.width, dimension.height) / 2 - dimension.margin,\n        colors:[\"#8994FA\",\"#FA7C86\",\"#95E7B6\",\"#98D2FB\",\"#FAA4DA\",\"#F6C56C\",\"#75E1EB\",\"#D8C31B\"]\n    })\n\n    const handleCreateUpdatePie = () => {\n        let svg;\n        if (!d3.select(\"#my_dataviz\").select('svg').node()) {\n            svg = d3.select(\"#my_dataviz\")\n                .append(\"svg\")\n                .attr(\"width\", dimension.width)\n                .attr(\"height\", dimension.height)\n                .append(\"g\")\n                .attr(\"transform\", \"translate(\" + dimension.width / 2 + \",\" + dimension.height / 2 + \")\")\n        }\n        else {\n            svg = d3.select(\"#my_dataviz\").select('svg').select(\"g\")\n        }\n\n        let color = d3.scaleOrdinal(dimension.colors.sort(sort)).domain(Object.values(props.data))\n        let pie = d3.pie().value((d) => d)\n        let data_ready = pie(Object.values(props.data))\n\n        let updatepath = svg.selectAll('path').data(data_ready)\n        let updatepolyline = svg.selectAll('polyline').data(data_ready)\n        let updateLabel = svg.selectAll('text').data(data_ready)\n\n        const arcGenerator = d3.arc()\n            .innerRadius((dimension.radius() - 60) * 0.7)\n            .outerRadius(dimension.radius() * 0.7)\n            .padAngle(.06)\n            .padRadius(100)\n            .cornerRadius(2);\n\n        const outerArc = d3.arc()\n            .innerRadius(dimension.radius() * 0.8)\n            .outerRadius(dimension.radius() * 0.8)\n\n        updatepath\n            .enter()\n            .append('path')\n            .merge(updatepath)\n            .attr('d', arcGenerator)\n            .attr('fill', (d) => color(d.data))\n            .attr(\"transform\", (d) => \"translate(0,0)\")\n            .attr(\"stroke\", \"rgba(0,0,0,0.7)\")\n            .style(\"stroke-width\", \"2px\")\n            .attr(\"data\", (d) => d.data)\n            .style(\"opacity\", 0.8)\n            .on('mouseover', (e) => {\n                tippy(e.target, {\n                    content: `<div style=\"display:flex;flex-direction:row;align-item:center;justify-content:center;color:#ffffff;font-size:14px;font-weight:bold;\">\n              <div>${(+e.target.getAttribute(\"data\") * 100 / Object.values(props.data).reduce((a, b) => a + b, 0)).toFixed(1)}%</div>\n              </div>`,\n                    followCursor: true,\n                    plugins: [followCursor],\n                    allowHTML: true,\n                    // moveTransition: 'transform 0.6s ease-out',\n                });\n            })\n\n        updatepolyline\n            .enter()\n            .append('polyline')\n            .merge(updatepolyline)\n            .attr(\"stroke\", \"black\")\n            .style(\"fill\", \"none\")\n            .attr(\"stroke-width\", 0.5)\n            .attr('points', function (d) {\n                var posA = arcGenerator.centroid(d) // line insertion in the slice\n                var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that\n                var posC = outerArc.centroid(d); // Label position = almost the same as posB\n                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left\n                posC[0] = dimension.radius() * 0.8 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\n                return [posA, posB, posC]\n            })\n\n        updateLabel\n            .enter()\n            .append('text')\n            .merge(updateLabel)\n            .text(function (d, idx) { return `${Object.keys(props.data)[idx]}\\n\\n${d.data}${props.suffix}` })\n            .attr('font-size', '12px')\n            .attr('transform', function (d) {\n                var pos = outerArc.centroid(d);\n                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n                pos[0] = dimension.radius() * 0.8 * (midangle < Math.PI ? 1 : -1) + (midangle < Math.PI ? 2 : -2);\n                pos[1] = pos[1] + 4\n                return 'translate(' + pos + ')';\n            })\n            .style('text-anchor', function (d) {\n                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n                return (midangle < Math.PI ? 'start' : 'end')\n            })\n\n        updatepath.exit().remove()\n        updatepolyline.exit().remove()\n        updateLabel.exit().remove()\n\n    }\n\n    const sort = (a, b) =>{  \n        return 0.5 - Math.random();\n      } \n\n    useEffect(() => {\n        console.log(props)\n        handleCreateUpdatePie()\n    }, [props])\n\n    return <div>\n        <div id=\"my_dataviz\" >\n            <p className=\"title\">{props.title}</p>\n        </div>\n    </div>\n}\n\nexport default DonutChart;",{"ruleId":"13","severity":1,"message":"14","line":10,"column":13,"nodeType":"15","messageId":"16","endLine":10,"endColumn":20},{"ruleId":"17","severity":1,"message":"18","line":119,"column":8,"nodeType":"19","endLine":119,"endColumn":15,"suggestions":"20"},"no-unused-vars","'setData' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleCreateUpdatePie'. Either include it or remove the dependency array.","ArrayExpression",["21"],{"desc":"22","fix":"23"},"Update the dependencies array to be: [handleCreateUpdatePie, props]",{"range":"24","text":"25"},[4900,4907],"[handleCreateUpdatePie, props]"]