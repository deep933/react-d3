[{"/Users/dipmallakhani/Desktop/react-d3/react-d3/src/App.js":"1"},{"size":4361,"mtime":1607396742942,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"8vr9ij","/Users/dipmallakhani/Desktop/react-d3/react-d3/src/App.js",["7","8","9"],"import React, { useEffect, useState, useRef } from 'react'\nimport './App.css';\nimport * as d3 from 'd3';\nimport tippy, { followCursor } from 'tippy.js';\nimport 'tippy.js/dist/tippy.css';\n\n\nfunction App() {\n  const [dimension, setDimension] = useState({\n    width: 350,\n    height: 350,\n    margin: 50,\n    radius: () => Math.min(dimension.width, dimension.height) / 2 - dimension.margin\n  })\n  const [data, setData] = useState({ protien: 23, carbs: 3, fats: 45 })\n\n\n\n\n  const createPie = () => {\n    let svg;\n\n    if (!d3.select(\"#my_dataviz\").select('svg').node()) {\n      svg = d3.select(\"#my_dataviz\")\n        .append(\"svg\")\n        .attr(\"width\", dimension.width)\n        .attr(\"height\", dimension.height)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + dimension.width / 2 + \",\" + dimension.height / 2 + \")\")\n    }\n    else {\n      svg = d3.select(\"#my_dataviz\").select('svg').select(\"g\")\n    }\n\n    let color = d3.scaleOrdinal(d3.schemeSet2).domain(Object.values(data))\n    let pie = d3.pie().value((d) => d)\n    let data_ready = pie(Object.values(data))\n    let updatepath = svg.selectAll('path').data(data_ready)\n    let updatepolyline = svg.selectAll('polyline').data(data_ready)\n    let updateLabel = svg.selectAll('text').data(data_ready)\n\n    const arcGenerator = d3.arc().innerRadius((dimension.radius() - 60) * 0.7).outerRadius(dimension.radius() * 0.7).padAngle(.06)\n      .padRadius(100)\n      .cornerRadius(2);\n\n    const outerArc = d3.arc().innerRadius(dimension.radius() * 0.8).outerRadius(dimension.radius() * 0.8)\n\n    updatepath\n      .enter()\n      .append('path')\n      .merge(updatepath)\n      .attr('d', arcGenerator)\n      .attr('fill', (d) => color(d.data))\n      .attr(\"transform\", (d) => \"translate(0,0)\")\n      .attr(\"stroke\", \"rgba(0,0,0,0.7)\")\n      .style(\"stroke-width\", \"1px\")\n      .attr(\"data\", (d) => d.data)\n      .style(\"opacity\", 0.8)\n      .on('mouseover', (e) => {\n\n        console.log(e.target.style)\n        tippy(e.target, {\n          content: `<div style=\"display:flex;flex-direction:row;align-item:center;justify-content:center;color:#ffffff;font-size:14px;font-weight:bold;\">\n          <div>${(+e.target.getAttribute(\"data\") * 100 / Object.values(data).reduce((a, b) => a + b, 0)).toFixed(1)}%</div>\n          </div>`,\n          followCursor: true,\n          plugins: [followCursor],\n          allowHTML: true,\n          // moveTransition: 'transform 0.6s ease-out',\n        });\n      })\n\n    updatepolyline\n      .enter()\n      .append('polyline')\n      .merge(updatepolyline)\n      .attr(\"stroke\", \"black\")\n      .style(\"fill\", \"none\")\n      .attr(\"stroke-width\", 1)\n      .attr('points', function (d) {\n        var posA = arcGenerator.centroid(d) // line insertion in the slice\n        var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that\n        var posC = outerArc.centroid(d); // Label position = almost the same as posB\n        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left\n        posC[0] = dimension.radius() * 0.8 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\n        return [posA, posB, posC]\n      })\n\n    updateLabel\n      .enter()\n      .append('text')\n      .merge(updateLabel)\n      .text(function (d, idx) { return `${Object.keys(data)[idx]}\\n\\n${d.data}g` })\n      .attr('font-size', '12px')\n      .attr('transform', function (d) {\n        var pos = outerArc.centroid(d);\n        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n        pos[0] = dimension.radius() * 0.8 * (midangle < Math.PI ? 1 : -1) + (midangle < Math.PI ? 2 : -2);\n        pos[1] = pos[1] + 4\n        return 'translate(' + pos + ')';\n      })\n      .style('text-anchor', function (d) {\n        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n        return (midangle < Math.PI ? 'start' : 'end')\n      })\n\n    updatepath.exit().remove()\n    updatepolyline.exit().remove()\n    updateLabel.exit().remove()\n\n  }\n\n  useEffect(() => {\n    createPie()\n  }, [data])\n\n\n  return <div>\n    <div id=\"my_dataviz\" ></div>\n\n    <button onClick={() => {\n      setData({ protien: 13, carbs: 34, fats: 15, jk: 5 })\n    }}>\n      Change\n    </button>\n\n  </div>\n}\n\nexport default App;\n",{"ruleId":"10","severity":1,"message":"11","line":1,"column":38,"nodeType":"12","messageId":"13","endLine":1,"endColumn":44},{"ruleId":"10","severity":1,"message":"14","line":9,"column":21,"nodeType":"12","messageId":"13","endLine":9,"endColumn":33},{"ruleId":"15","severity":1,"message":"16","line":115,"column":6,"nodeType":"17","endLine":115,"endColumn":12,"suggestions":"18"},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'setDimension' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createPie'. Either include it or remove the dependency array.","ArrayExpression",["19"],{"desc":"20","fix":"21"},"Update the dependencies array to be: [createPie, data]",{"range":"22","text":"23"},[4146,4152],"[createPie, data]"]